package teampj;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public class LoginForm extends JFrame {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton;
    private JButton signupButton;

    public LoginForm() {
        setTitle("javachip 로그인");
        setSize(400, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // 메인 패널
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBackground(Color.WHITE);
        mainPanel.setBorder(BorderFactory.createEmptyBorder(50, 50, 50, 50));

        // 로고 패널
        JLabel logoLabel = new JLabel(new ImageIcon("path/to/your/logo.png"));
        logoLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainPanel.add(logoLabel);

        // 제목 라벨
        JLabel titleLabel = new JLabel("javachip");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        titleLabel.setForeground(new Color(34, 34, 34));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        titleLabel.setBorder(BorderFactory.createEmptyBorder(20, 0, 20, 0));
        mainPanel.add(titleLabel);

        // 아이디 입력 필드
        usernameField = new JTextField();
        usernameField.setFont(new Font("Arial", Font.PLAIN, 16)); // 글꼴 및 크기 설정
        usernameField.setForeground(Color.BLACK); // 글자 색상 설정
        usernameField.setMaximumSize(new Dimension(300, 40));
        usernameField.setBorder(BorderFactory.createTitledBorder("아이디"));
        mainPanel.add(usernameField);

        // 비밀번호 입력 필드
        passwordField = new JPasswordField();
        passwordField.setFont(new Font("Arial", Font.PLAIN, 16)); // 글꼴 및 크기 설정
        passwordField.setForeground(Color.BLACK); // 글자 색상 설정
        passwordField.setMaximumSize(new Dimension(300, 40));
        passwordField.setBorder(BorderFactory.createTitledBorder("비밀번호"));
        mainPanel.add(passwordField);

        // 로그인 버튼
        loginButton = new JButton("로그인");
        loginButton.setBackground(new Color(144, 238, 144)); // 연한 녹색
        loginButton.setForeground(Color.WHITE);
        loginButton.setFocusPainted(false);
        loginButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        loginButton.setMaximumSize(new Dimension(300, 40));
        loginButton.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        mainPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        mainPanel.add(loginButton);

        // 회원가입 버튼
        signupButton = new JButton("회원가입");
        signupButton.setBackground(Color.WHITE);
        signupButton.setForeground(new Color(144, 238, 144)); // 연한 녹색
        signupButton.setFocusPainted(false);
        signupButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        signupButton.setMaximumSize(new Dimension(300, 40));
        signupButton.setBorder(BorderFactory.createLineBorder(new Color(144, 238, 144)));
        mainPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        mainPanel.add(signupButton);

        // 로그인 버튼 클릭 이벤트
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                login();
            }
        });

        // 회원가입 버튼 클릭 이벤트
        signupButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new SignupForm();
                dispose(); // 현재 창 닫기
            }
        });

        add(mainPanel, BorderLayout.CENTER);
        setVisible(true);
    }

    private void login() {
        String username = usernameField.getText();
        String password = new String(passwordField.getPassword());
        String hashedPassword = hashPassword(password); // 해싱된 비밀번호로 비교

        // 디버그 출력
        System.out.println("Username: " + username);
        System.out.println("Hashed Password: " + hashedPassword);

        try (Connection conn = DatabaseConnection.getConnection()) {
            String query = "SELECT * FROM users WHERE username = ? AND password = ?";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, username);
            stmt.setString(2, hashedPassword);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                JOptionPane.showMessageDialog(this, "로그인 성공!");
                // 로그인 성공 시 Mypage 화면으로 전환
                new Mypage(username, rs.getString("nickname")); // 닉네임 전달
                dispose();
            } else {
                JOptionPane.showMessageDialog(this, "로그인 실패: 잘못된 아이디 또는 비밀번호입니다.");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "로그인 실패: " + ex.getMessage());
        }
    }


    // SHA-256 해싱 메서드
    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashedBytes = md.digest(password.getBytes());
            return Base64.getEncoder().encodeToString(hashedBytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static void main(String[] args) {
        new LoginForm();
    }
}
