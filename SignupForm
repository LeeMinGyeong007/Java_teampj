package teampj;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

public class SignupForm extends JFrame {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JPasswordField confirmPasswordField;
    private JTextField emailField;
    private JTextField nicknameField;
    private JButton signupButton;

    public SignupForm() {
        setTitle("javachip 회원가입");
        setSize(400, 600); // 창 크기 유지
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // 메인 패널
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBackground(Color.WHITE);
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20)); // 여백 유지

        // 제목 라벨
        JLabel titleLabel = new JLabel("javachip");
        titleLabel.setFont(new Font("Malgun Gothic", Font.BOLD, 22));
        titleLabel.setForeground(new Color(34, 34, 34));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 0, 10, 0));
        mainPanel.add(titleLabel);

        // 아이디 입력 필드
        usernameField = new JTextField();
        usernameField.setFont(new Font("Malgun Gothic", Font.PLAIN, 14));
        usernameField.setMaximumSize(new Dimension(300, 45));
        usernameField.setBorder(BorderFactory.createTitledBorder("아이디"));
        mainPanel.add(usernameField);

        // 비밀번호 입력 필드
        passwordField = new JPasswordField();
        passwordField.setFont(new Font("Malgun Gothic", Font.PLAIN, 14));
        passwordField.setMaximumSize(new Dimension(300, 45));
        passwordField.setBorder(BorderFactory.createTitledBorder("비밀번호"));
        mainPanel.add(passwordField);

        // 비밀번호 확인 필드
        confirmPasswordField = new JPasswordField();
        confirmPasswordField.setFont(new Font("Malgun Gothic", Font.PLAIN, 14));
        confirmPasswordField.setMaximumSize(new Dimension(300, 45));
        confirmPasswordField.setBorder(BorderFactory.createTitledBorder("비밀번호 확인"));
        mainPanel.add(confirmPasswordField);

        // 이메일 입력 필드
        emailField = new JTextField();
        emailField.setFont(new Font("Malgun Gothic", Font.PLAIN, 14));
        emailField.setMaximumSize(new Dimension(300, 45));
        emailField.setBorder(BorderFactory.createTitledBorder("이메일"));
        mainPanel.add(emailField);

        // 닉네임 입력 필드
        nicknameField = new JTextField();
        nicknameField.setFont(new Font("Malgun Gothic", Font.PLAIN, 14));
        nicknameField.setMaximumSize(new Dimension(300, 40));
        nicknameField.setBorder(BorderFactory.createTitledBorder("닉네임"));
        mainPanel.add(nicknameField);

        // 회원가입 버튼
        signupButton = new JButton("회원가입");
        signupButton.setBackground(new Color(144, 238, 144));
        signupButton.setForeground(Color.WHITE);
        signupButton.setFocusPainted(false);
        signupButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        signupButton.setMaximumSize(new Dimension(300, 40));
        signupButton.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        mainPanel.add(Box.createRigidArea(new Dimension(0, 15)));
        mainPanel.add(signupButton);

        // 회원가입 버튼 클릭 이벤트
        signupButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                signup();
            }
        });

        add(mainPanel, BorderLayout.CENTER);
        setVisible(true);
    }

    private void signup() {
        String username = usernameField.getText();
        String password = new String(passwordField.getPassword());
        String confirmPassword = new String(confirmPasswordField.getPassword());
        String email = emailField.getText();
        String nickname = nicknameField.getText();

        try (Connection conn = DatabaseConnection.getConnection()) {
            // 아이디 중복 검사
            if (isDuplicate(conn, "username", username)) {
                JOptionPane.showMessageDialog(this, "이미 사용 중인 아이디입니다.");
                return;
            }

            // 이메일 중복 검사
            if (isDuplicate(conn, "email", email)) {
                JOptionPane.showMessageDialog(this, "이미 사용 중인 이메일입니다.");
                return;
            }

            // 비밀번호 확인
            if (!password.equals(confirmPassword)) {
                JOptionPane.showMessageDialog(this, "비밀번호가 일치하지 않습니다.");
                return;
            }

            // SHA-256 해싱
            String hashedPassword = hashPassword(password);

            // 회원가입 쿼리
            String query = "INSERT INTO users (username, password, email, nickname) VALUES (?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, username);
            stmt.setString(2, hashedPassword);
            stmt.setString(3, email);
            stmt.setString(4, nickname);
            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "회원가입 성공!");

            // 화면 전환: LoginForm 실행 후 SignupForm 닫기
            SwingUtilities.invokeLater(() -> {
                new LoginForm();
                dispose();
            });
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "회원가입 실패: " + ex.getMessage());
        }
    }

    // 중복 검사 메서드
    private boolean isDuplicate(Connection conn, String field, String value) throws SQLException {
        String query = "SELECT COUNT(*) FROM users WHERE " + field + " = ?";
        PreparedStatement stmt = conn.prepareStatement(query);
        stmt.setString(1, value);
        ResultSet rs = stmt.executeQuery();
        rs.next();
        return rs.getInt(1) > 0;
    }

    // SHA-256 해싱 메서드
    private String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashedBytes = md.digest(password.getBytes());
            return Base64.getEncoder().encodeToString(hashedBytes);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static void main(String[] args) {
        new SignupForm();
    }
}
