package teampj;

import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class TeamMemberManager {
    private String teamName;
    private String username;

    public TeamMemberManager(String username, String teamName) {
        this.username = username;
        this.teamName = teamName;
    }

    public void manageTeamMembers() {
        String[] options = {"팀원 추가", "팀원 삭제", "팀장 변경", "취소"};
        int choice = JOptionPane.showOptionDialog(
                null, 
                "팀원 관리 옵션을 선택해 주세요", 
                "Manage Team Members", 
                JOptionPane.DEFAULT_OPTION, 
                JOptionPane.INFORMATION_MESSAGE, 
                null, 
                options, 
                options[0]);

        switch (choice) {
            case 0 -> addTeamMember();
            case 1 -> removeTeamMember();
            case 2 -> changeTeamLeader();
            default -> {
            } // 취소
        }
    }

    private void addTeamMember() {
        String newMemberUsername = JOptionPane.showInputDialog("새로운 팀원의 아이디를 입력하세요.");
        if (newMemberUsername == null || newMemberUsername.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "아이디를 입력하지 않았습니다.");
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection()) {
            // 사용자 존재 여부 확인
            String checkUserQuery = "SELECT COUNT(*) FROM users WHERE username = ?";
            PreparedStatement checkUserStmt = conn.prepareStatement(checkUserQuery);
            checkUserStmt.setString(1, newMemberUsername);
            ResultSet userRs = checkUserStmt.executeQuery();
            if (userRs.next() && userRs.getInt(1) == 0) {
                JOptionPane.showMessageDialog(null, "회원이 존재하지 않습니다.");
                return;
            }

            // 이미 팀에 속해 있는지 확인
            String checkMembershipQuery = "SELECT COUNT(*) FROM team_members WHERE team_id = ? AND username = ?";
            PreparedStatement checkMembershipStmt = conn.prepareStatement(checkMembershipQuery);
            checkMembershipStmt.setInt(1, getTeamId(conn));
            checkMembershipStmt.setString(2, newMemberUsername);
            ResultSet membershipRs = checkMembershipStmt.executeQuery();
            if (membershipRs.next() && membershipRs.getInt(1) > 0) {
                JOptionPane.showMessageDialog(null, "이미 팀원인 아이디 입니다.");
                return;
            }

            // 팀 구성원 추가
            String insertMemberQuery = "INSERT INTO team_members (team_id, username, role) VALUES (?, ?, 'member')";
            PreparedStatement insertMemberStmt = conn.prepareStatement(insertMemberQuery);
            insertMemberStmt.setInt(1, getTeamId(conn));
            insertMemberStmt.setString(2, newMemberUsername);
            insertMemberStmt.executeUpdate();

            JOptionPane.showMessageDialog(null, "팀원 추가가 완료되었습니다.");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "팀원 추가 에러가 발생했습니다." + ex.getMessage());
        }
    }

    private void removeTeamMember() {
        String memberUsername = JOptionPane.showInputDialog("팀에서 삭제하려는 아이디를 입력하세요.");
        if (memberUsername == null || memberUsername.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "아이디를 입력하지 않았습니다.");
            return;
        }

        if (memberUsername.equals(username)) {
            JOptionPane.showMessageDialog(null, "자신은 삭제할 수 없습니다. 팀 선택 화면에서 팀 탈퇴가 가능합니다.");
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection()) {
            // 팀 구성원 삭제
            String deleteMemberQuery = "DELETE FROM team_members WHERE team_id = ? AND username = ?";
            PreparedStatement deleteMemberStmt = conn.prepareStatement(deleteMemberQuery);
            deleteMemberStmt.setInt(1, getTeamId(conn));
            deleteMemberStmt.setString(2, memberUsername);
            int rowsAffected = deleteMemberStmt.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "팀원 삭제가 완료되었습니다.");
            } else {
                JOptionPane.showMessageDialog(null, "입력하신 아이디는 팀에 존재하지 않습니다.");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "팀원 삭제 에러가 발생했습니다." + ex.getMessage());
        }
    }

    private void changeTeamLeader() {
        String newLeaderUsername = JOptionPane.showInputDialog("새로운 팀장의 아이디를 입력해주세요.");
        if (newLeaderUsername == null || newLeaderUsername.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "아이디를 입력하지 않았습니다.");
            return;
        }

        if (newLeaderUsername.equals(username)) {
            JOptionPane.showMessageDialog(null, "현재 팀장입니다.");
            return;
        }

        try (Connection conn = DatabaseConnection.getConnection()) {
            // 새로운 팀장이 유효한 팀원인지 확인
            String checkUserQuery = "SELECT COUNT(*) FROM team_members WHERE team_id = ? AND username = ?";
            PreparedStatement checkUserStmt = conn.prepareStatement(checkUserQuery);
            checkUserStmt.setInt(1, getTeamId(conn));
            checkUserStmt.setString(2, newLeaderUsername);
            ResultSet userRs = checkUserStmt.executeQuery();

            if (userRs.next() && userRs.getInt(1) == 0) {
                JOptionPane.showMessageDialog(null, "팀원이 아닌 아이디 입니다.");
                return;
            }

            // 팀장 변경
            String updateTeamLeaderQuery = "UPDATE teams SET leader_username = ? WHERE team_id = ?";
            PreparedStatement updateLeaderStmt = conn.prepareStatement(updateTeamLeaderQuery);
            updateLeaderStmt.setString(1, newLeaderUsername);
            updateLeaderStmt.setInt(2, getTeamId(conn));
            updateLeaderStmt.executeUpdate();

            // 역할 변경
            String updateRolesQuery = "UPDATE team_members SET role = CASE " +
                    "WHEN username = ? THEN 'leader' " +
                    "WHEN username = ? THEN 'member' END " +
                    "WHERE team_id = ?";
            PreparedStatement updateRolesStmt = conn.prepareStatement(updateRolesQuery);
            updateRolesStmt.setString(1, newLeaderUsername);
            updateRolesStmt.setString(2, username);
            updateRolesStmt.setInt(3, getTeamId(conn));
            updateRolesStmt.executeUpdate();

            JOptionPane.showMessageDialog(null, "탐장 변경이 완료되었습니다.");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "팀장 변경 중 에러가 발생했습니다." + ex.getMessage());
        }
    }

    private int getTeamId(Connection conn) throws SQLException {
        String query = "SELECT team_id FROM teams WHERE team_name = ?";
        PreparedStatement stmt = conn.prepareStatement(query);
        stmt.setString(1, teamName);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            return rs.getInt("team_id");
        }
        throw new SQLException("Team ID not found for team: " + teamName);
    }
}
